%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: tmp12412.dvi
%%CreationDate: Thu Jul  7 21:43:40 2016
%%BoundingBox: -25 437 73 453
%%DocumentFonts: NimbusRomNo9L-Regu CMMI12 CMR8
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/bin/dvips -E tmp12412 -o bessel.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.07.07:2143
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1D9B057F51ACE6BBADF67DC4C0A0F1AE1F8606EE140FB1B2D8843522362
8762E804EDDD847E3201FE5EE8F0F34C223A051AF29F94D581F1319F9405D222
5D11EDEE653B5DFCFA76A428F3244C360E5D64633DA200D77301E7ED1EFC18DB
2BABDDDB242A2DA1829BE2AADED3046A2B41F5018F52BBBCC1887B6023375FD6
5E135F1C6FC129C429DFF593211753D35E506CA1840FC02CEF83D7E675A74C63
AEC3C1C6D3B2889A2EAC6451483AAA15EC3371D20FD98A1502DDEA0C551EE6C7
13E640587BD641C298A4FD4E989EEC1BA81C95A5EAB7914BBF17BB5F8E4EE41C
A5421A46B6A5668425124C0A7DE2BE4E13FD498D6888B03C2D6EFBDB8E462AF8
A2E2945F87163BC48EA4328A28AE0658A0831DF8D6208DEFEE939244572468F2
576155B8529B990C859D4D1775D93E307CAE31BA00D488F734328E55D6A30677
A4E4AF4BEACEEE36AA2A58449A70373A6D97DFC217843E59549F780345E1BA20
B74B46FA556FF6AD041F5AF964A44ED4636FFEED542D8E002D20BD4A45139FE9
1224CA8D79C8888A61CFF11B2F885FF7407F6D9D682EF0E6CDEF9577BC6B8395
99C230E59C767E2188E178841937FC080A6F01FA8C56BEAD52FD6315BB45EFF1
31B1BB41DD4483A25CD6E21C2C97D8C42A2C812782F969E8736953B916070558
4B7CF29AE5CBA9B56A59F3FBAC5275CABABA10951E037226448A025767337026
11FC35AEE917AAC7D1D9B5451D564727948552F6746A60A2C241925E3C0181DF
7DFF0A291B2D4E20F53B5E808AE8C32582387D855D66AA262A8EB378B9C6EC20
F210E1CDD30F0BF2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 74 /J put
dup 89 /Y put
dup 106 /j put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427090573E1BC8D29A217CCEC
0D2F8D66342CE482C82696E65DF25A9A0D5E8197CF92E39923627C5E37F1402A
7A70057E5D99A55B6543C2AF2CDFA246607D663DFBDC0645DBF828418D0EC8AB
2AB23D24CF8CE07666B85AA2C769DA4EDD9D45B643CF704F17BDC1FA8D6B8D4F
A4A4E2AB54281F034D54A56E887E7148919C68465142A2C0380A50519CEC6E1E
C232D79B3ACA07A34CCA87A8722EB0F03839DCF6BD522AA4AD73D4DD656B5C08
2E03BA4D824E7B833E89963FB3DE11F7DFF7D47C96C4722899060FC8F91F28A8
BB64EF2EA43D7C1FA208EF44EB316981B1C6F09AC718F307E80B29885BD8B971
C8670EB65678666485E1467125B7EB3C9EEF561001051A26F3196C46C01A924B
B9615DBB6786DF6522B4AFF4D46E8B522B3BB66A51D65D864AA64B5B352D3055
53A14C5952655D1239A7FD2CC98708E04A5AB714B111D8A8FE84DB4AF36B6E54
543B4114855461C83881CDF494C2B0F8337558AA398E37BF984F934C66986C2E
E9A510A1B003193A926B6C6555E53868C6384CFDCEC2B611612068841D7ED60D
954F44AB46FF87C7C9FC68AAC0AC1BB0C02E9F97305FC7E43A31E0002A2F803A
30B1246AA8BB79B50B784FD9239EEB2738821A8489436ADCE04E4BD9FE414721
789A755AF4B6CDC2165E496FF067AB191731457361624E0EDDB585990593F20A
35CD79B1F48EC20E101CA02835A2E519A1C45A14C3DABB8AA4C7012428ECD18D
DA85175E3CE67FD4A6528AC531C5E3B553E8D513719B4467FF2EBB5C74893583
6256FF96F06EA28A98D40DFF9A4EB09326163E0BE25C5DAD89BA80630FFE3EBA
D70FD8F2302B44FA2589DEC1BC21D9C251BDF71BAD45A7796DC14E05E21ABCA2
EDB4D2014548B232CF00A760D92BF4B537D15C66B6C0124EE0641A8704FC0B84
621688A431AB0E7409745B1E190166720490A124A76A808841FE81D39359DDCC
10C14CA858E82DA3519174D386845193EBE4AE095D20B8EC24B0F3B41C828B96
A9FEEC29F590EE857A3716A3CFEB9E338EF0D7B0FA721D7D11990750232B6976
B16C6815E977CA50513DA81445E93555250A44B41876C1DB3A6B32B70C9CC4B2
7DA28E97CCA8A8826C4D03347F0F0C127E378CA8C327C5117F235B34FDAC0F5F
03741B47E291575E3BDB0305B7E996AC8708CE0EF766E7D0E4EA7556A9277736
B514E7BE15A7FEA149D22D559BAD27D3C5652733D5F831D38B77816AC88614F8
72C6029233FD26B290D6C990CCE3CBD1E94A490C47561CBC9D2CC5245E285F62
582DFB8EB77A172B379FEA2457831A92A9448B9E70CAC30A55B6C5FEDB7F8903
E649D097B0BD1BDEB0B3470B988D2190616F793DB31310AA0A8F45140EE4FAE8
68102CFA346BF944CBBB0E7BABC0413F678204811FFF7A8AAECFD1F72BFF12AB
00F60F9980CB3BC380FE5EEE73AE766B4CA8DE3C3A2CAB1A9D582B8077D37493
4FB0F37723C0C4BFA4DFE3FD4AE99F5A8595EA811BCA265DEEB9EE69C27D306A
50096EF07C38BA3E6EE060FED02FDDDC616ADC7E9FE3FF01837B81F4E413658D
1D7B608A6BE9F2F228831334E1E727FEE91E1754587A1EB68C7AAFD6A184FE93
424703C14614C3E16E48A15CF6C8FFA1834BF460E51DF936172CC1F8D7564BDE
DF13D97C46933C7526C7FEB086BA9D1545640EB49379DDF94A744C34C220E0C8
987657A2D0BDDDB859A9A6515F68E3D13AF1E8865D5F58E31B90679B8FAAF5E1
001FA0E3D26C56EBDADA92E2FBB8D94B6C98D9D027651FBFBB3A072FB0AB62C4
B305649862996446966B6115DE398F9DF97503FB7301DFB8A811D6DF24927F6B
BA14F8B803C7055775BDA7BA93DB347862CDA5C58CE13FF833306D5C797804D3
D31C933CA56CED327257AA80B95D39A89D80F4F8AC6DB5F91A2722210E155A4F
C7CD358ECE95094C8757E1E800D33EC8B896020C55345AF682634A42F959CF3B
5C3CCAAEB9CD9E9953745E42D01B57933D33EBFE35446ED5A0AA8A95AE641A47
01D2B39911BA4413150E54DFBB28ADDADD25BA4E4EDD44513C46BD01DE210136
43331946EAD32816D8790D20B1822F1F554B10A5A1A47BD1F2A89CA56D87FF74
10A02D8B3CDFEB3418588E250926D0535888AE3A2D4C4D939C20FB456457DD3A
913CB39E1296ACE65106BE58AD66C17F04842A3E935676964E59A2B32AD55561
B129EF85A6BC65DE49E76EF6866BDA7A7E4D8049BD0B360A07DC36848F55B7E7
5A9B0E00748E0DC15365F364563654DC6216BD99A33847E05AF50807D9B90F92
DCC931D1B188A69CB1489766C2756271C6D249995DAE93CB2FC3D743ED4B9C01
45E452D7B7559E19E06DACC3DCEFBD34E49C95E95286E7E9BAA4A0D1AE0E36DC
761C34438DE76FA4B9B321061FF84840E7F348B5B87604C0FF8A6C6F83A1C907
8F777D4D5043F65DB4C5F2EEBA1F2C5E6E7C59168E5928B3F9D34AACFA52D3DF
0E47C27B4332914671F100543C7B5EE45645EA572E5058207E78CBE88A7316E4
3250DDF3B6383FE712F9C052EFF0AA546DF9B6735BEA3602E25624AE69AEF324
C9A31F11BD0F58ECE38BA2C0F0FDD29DE850902FF011D24971E6F669C351B8CA
71E38BEA8564DB5AB3FE015BB6D597750C01A497096692DF94B799E9F3DDC5DE
8140DDE92B191D2C729018ADBF03B017AB91F5F788E9280081315B8D5E2DDC59
5E8A211FB78B2EEEEB03B821E8B15BD0B93857942A61518DF46A86AC152A7C63
3B01E014CD52DC43AE2BCDD4B1B408E65B30392211B9197529522E0B771806E9
5B000AAA9AB4909C1530CB217D7D8592E2139EB3C0AC9ED57E98881E917F08C5
E1D9C0BAA80F48C02AE9493E21D3667A0A0F9FEFE810C4B98CDB189C07DC8F30
3FE3D59691398776E61D7FE7CF1CB0743BECDCCDFD90918015F137E9A0831907
19943130DB9BEF48AF39AB99C9650B9F1A1B9A5D031F8A7888B3E661133CC0C1
BDAC621E6DAC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585DEB6892874B4D6B35F4BA2895
2DDF4C9B8200B32D7368EC950C963D1DE798F32708041E395A94A27CF34DA94C
B1F8A8AE4E95E3D9D23DBB28D017F1A5A232B2533A21F4FAF71C5CD8623B1DB3
75DEDBBC846759B3DDBACBD0BB9FE882315994E7704F25655F9332C1ACC7C130
53510645FF66168961B7D66288CF36C97474DF121FE8E9B9CDC1B4F27BDAD2A0
4EAFC90D9DEE76C678DB7E7DEAAC1AE5F0C5AA20C9489CF6BF32D2A3CAD6BD84
A5074B5832023E809B80408BB9B61C23FD31B10B777D6D0303D8672E44415545
1033CEE160F9FBE554BD27786B870B25727E7084BEA8B53016FD85CF9289DF78
EE12F3DEB4E33DCD967D167E99036FF3B1B8EA0380FFD69361F81BAF8D677E07
6CEC52D4E5526B66BC38B0CC9669D8D3BCEAEC9258D51D73C33A4D4F1488C39A
AE61A41BAC6A15727CE914A10335A0A09DDE121A580DC892423613708F967186
E210792D9EA463C2FB76BC889370A04D8682D0AE03DE6338AA0D62613C595D1E
9AA52AAD14BB8222997715DC16BB65D88A7AAD93961976DE90E40187EA775CC4
040046CF004AF4D76C8434E66ADB72B6710A1830B017A9711B886A186DB61E3F
985EEFDAD748E35BA0325B03468042550ED9739076EB30477D455C7DF2258C28
036A4B32B3491B7D4E0731012EF40527BF0AA0FBCFC9A2833660300628954409
1C3074E04673F0EF8B894110FCC770E127C526F1BC74B8294CC06FD8B590728C
D790989027AB9043E20F807BC9C2A57259E74D6DB20FD6F05AAA14D659527745
31A01D08AF8F62874DE9FFBD9C7300D3C2260F9633816ACF8132B8CB3FBE5D03
9C24DD75C7A4F038C15E7007939680912BE6F4727392706083F71F65226003CB
9EC18D503C34B6D031F7AE1F58AE1F5CC02281429B33760498C875E808F05BD9
039DFAE90751B085BDF6F5AA9A634B5BDA458E4F3E17638B00884A463DC008F0
470EFFD7D7B805231450985FE13F6F382BED2C0333FCCDE9366DDBA66334B972
95BFA4099D149EE93FBCC6272AF549BDC5C3CC23E1FD81849C040C7EE7BEFF04
E2E8606318816EFAA8E50F91A710D45BB0452D7895FED4BB91EE2A8B552A4806
BD491A18FC704A3113BD4B2D8F70FBE7553374E15A1242DD63935DC5DFE793C1
6F9C0CFA56135D68F373043161690B40DD8D14F3D521B90EF3A735BB3C794EA9
8AF95A930E7AA44CA32820DD5B17B69A47392403736211C93E48CA43B668E809
B02354FF0785CF5F88D9C178153E0CFE712E15E6C158940CC86C3E3CF3C86B41
6FE6BF97BC5F0DFCABD1B9A9D2DFEF1988B2ACA4C132F1F0507C8F221203840F
037B4146F2BAB25A95E1B0429A0F9DCD5E0D14A57EE877A5081B3F9D9B232AD6
0CA1EB8A44900EC9C57B38834DF8ADB373A5B5BDB1D57F414F3D75399A6E816F
7DDFA1EC3DEC0FDA50ADF09D8FCC0259C23264C8E7977C4C06D2A398200DE198
82B5A3002E072E91F7CB647E1131C0CEE91162DA66C9C1C9B45F6FE1C1EE5A64
B3ED6EC586613C178C66855882488D30AD14C3AAC6F89947D155DC111130AF46
D4C19FFE10D3F0F5070C44375E9508D28368D77C3D743974952B50A79FBA6518
04B7ADA8FF0757E1E1B9D9BA4C3D02D306BDF393ABD5FDB4FD28A6ED41D5F9A2
155FE3BD49F4C1524900738C7D8D50C123883F159DE081017D4C5DA3ED81F506
337B15D7555935298ABF58FFC768A3B4931E4360F864B3771C82D3782862B2F1
BDB61AE87F19064FF843549A934EF901844A3CDE8D8093617DBF2FB8C7A3E2C6
45AE494DCE802539446CCC84230AF882BA6FAE2D2D6921395A52591D79473419
88B10CF4AFAB1A0323DA3A5F6B6B2F1328FDCFF053162A02B75A0CC062FB0AD1
D415A8232DE3ECB0C34028E002328AE49629AC4867324E24F786FB7B1106C2A6
D8B2E799E73D7F464D5ED48B33600D2A60DC41AFEE52F264F20B57ED3E0AD198
7809201973D8F1B479B4126D9080F19C7CD5DD0C335AA21FF6EA5ED94F383A18
1760A64139E3152125C4E7FB41039180AF5C3510C4E88D1B9BE1B48619F12AA0
159E97BC531F99999053013611B3230B8D462CB20D49E9287085A2AB71783B16
A4DFA77B1E74ABF75AAD3A3D857D0B6044853C5346456FD749529EC1FB00BEBA
9A31FC8DA5F4A317E7644446B44BB8012BCCAF8C5B4DA48D36959C47B0218392
F24C93D7F9FC8D64DB3730555065F649FE81E6B3B1E8D0ECC21206BB80B3AE6C
774D7FFBB977A8CDB82BDDAED09691A6FCD3FEA39CAD9CCA95EAB9A501E4F61D
1E3FD028AEB7212868166D5853E33EB59B3FE4A32EA3800CC8AD97D8576611E3
8EC99F57AD5A1601A6C2E44D2B6799B72E8CA641F77604ADE5CA870961C65D9E
E861F61D009037EA9FC04D479C6F4123EA812EBBBAC6B6F48D530BB5EE800584
33952B698525612082298F0E6E36968C8835333529F06FDFCA1636023C3B45D9
9837E560B857D1FAC1883222A1C90CA4E940136520C8AF7DC481A0DF97B01A25
989972496566E492F10EC7B88872E9A849CB717C3C883DE02F1CEFD0BD712607
82BEF6721C7E4192D1193BD94E99C0CCF702D9EC100066E1490E421FC72472E5
28053EC041E396333C90480C82F2BE3B0D8598B7310A3DD57B13D3C78EB58CF7
FEF83DB2C06A048C8AEAE9C9724A170FAC6BCF6A85AA31C1BDD052BAEDC24545
5943A3DFE5422C5E45E5D0CD32FED00DC9C6175EF0A6F4686548EC650147C6C2
69FE19F445BCE13EE42458BFF881F467FF46F7098CF432B6C3C5DEB9EE9C04FA
F2FF0BCEE90C1C5A12D28415BE077393D77C1CAA86BFE6608B06399356406E36
5A5B30FB0B2DE326AEC6875DC89259D8D768D2CC6E8CF4A13240A3DF0976A5ED
4ADBBBAB7E464D7B1F1047F47883359EC59D81F85D0CF9554899B7AEB30F4678
4FAA30052F941BEE8C41911D8273D0041E5E9405A678525548F6541C82BFEB78
AB615A9023244937FA1D1A49751BA141700703129E685E1C361C35CF01803D21
AF1214810D1B929E4B17B71C4DADC8DB1B79A4AB124DA87E8B5CB21863067E11
21EE5FCF4E050A2C5641319EB17E31E512DFA0656651A2340ADF99083F3F8AA3
75B88E098641C3F6EAC3A3E29A80CDB1F6A7A8BFCB63236DD078AB33707002BE
C2C86F14E67E7C16E74F3FCD11C0809A50FFDF4DDFA456F07FF671F3FE3AD85C
6A571295C58349BEFFC4449F832807549F2403488CF2897425F111FB284F2B27
2BA1D75FBFD124F2BFC328DB09A93A082D9EFCADC2BDD04583C106BA3812E507
028DA420DBC872DEDA90B79F113F5A4BE581DB49C5EB86E84AF46A23750F8B09
959CF714F36997CDAE9CEE26CD31F8B5061C0CBC620D7CCAA0E331EB7AB0AF62
C70A29279682A7906D3DBCAEE31DB58345A0C932B5E9082C87A69A63A297549D
01CCF8A92C81D0504D7CF99BD01BAE3BB56977F0E8D21158CD18F6523CF7B63E
EDB0EE5F66E30EBC30C6BD031235C8C2A656A6F4312C563ACE9A0185C5E1CA08
F5A12A5F633C7126AD5DBB78F911AD7311DE1E29EE4C7B9F4F01D64EB629AFBF
F28CA7C0D267AC0814AA776A2F731C046E7B34219F73C8EAEC809B80D04EC0A7
F06E07EBDBC6F9BC7F413BC1358EC3FA22E15FC60EF3EC60091856CB963DA110
3E2BED41CE8DA5C50E9EDFB70047B6D2CFA4ECEF0EF08F995B344FDF33B43765
12D85F65AD30E430DCA0C603380CE6ED74FCE37B423285E2237841A9EAC0E765
866766D97E63BADE1A9212BDB18B1DCA4AFDC278CAD67789F1B461902FD93DB8
32870771AD0712EB238A87FDC44A5835F97FF7B9EEAEF9680B10B64F84AE9B59
CDD2CCCC8877905FF0FD9FA726C867B2A937E876AAC9D965BF7E2042D77BDDB6
F5BE9915665FAF7964ED87D1E7255F40D834EEC2FC2A103346D66CEF8FD2FAE0
D9154FD2BB8D10422F6B34B5457E6E48141D58E82D248A206E80EDC589EB4EE8
85C4A4C8998AA0AD6282D8DCA42149633DF4B31961A667B3224C27161748515E
6779957834D96374BE924945D4B358FD10CFE1E9DAB2CE7AF67FDD390BFCE46B
BFD5E6625286B9FA53DEA8089DEC42C5CCF1A326ED18C4CE24869AE1F67560DD
C8F14819DD9FDA570CF0A0839285981E9A83283890333BC0584691D17C0BD9A1
D9AA53674F71457BF20D4585903C332571C29273FC5A71FEA56B8081AF6AC972
95A0B6CB33EA83F5BA47AA5D4C3D67FE151D15903F19887BBE8F9337D94DC2FD
9C5DEB09C684DC8F75DF47CCF6216626AAAFA4DFC47FF9D123C1BB977CA5F4BE
CEDB9ECDCDF94C70486498B92E1BDC97BDF4A1CDD306A27B6DFC0B5CB22E77FD
6E1E94B18FCC167B3CE4EA36D07A87F9D3B8A0E776AF2E5909A8F0811FE225F2
70B00E7C6496ECD6BC4285762280C544A4F1440A6452E8D74CBD9AFC306B4DB8
4346E8076A26621F2B1E410610B20C3AD162487C3B14FCF4E176027E6A0A6582
E605FEBEE2F634A7F336D53F37843DCA516552B17D14360D6DEBDCBF85188E22
D18CF74E739DE8C200F17990D35A3680EB7E38BE239C612F6AC06E69FC7987E3
727E101E4C92C42332565E0FEA2750D4FEE53FB7C432647A879F04DC42C71BE9
1FA758E990A77EBB8537AAF31E686860F312DEC324B31B20491AE3F82DDB8CF6
1EB91B8377C2B2541958D83F888EA0B31B10457CDBD1440FCEBF6640DF7A02F9
3DAC4FE07390CF1C87FB7594FBC3002F850E39F77C0B58E900DE27E8CFD486BA
C1E57C39A3423EA7867FC1632E433C8FFFA632D63B75D7449D72EB65FE1319F5
851242B0C2A00BD7CFD146B023CC27A5456BEB7A19B1BEFB3E4AD635584152FE
5E7A13B7C74C438E0212215A40663EAF3D6F008E6EEDAB6A9709C36881E8C724
20D65838177C0D5B410399EB1F89715A846E05FC3D09963BE00C1B1DD2DB43E2
74354CEF1BF682CEE686079BA80F4AF54C46133E54A966E93490C7ED6E46D8FE
97C313D83D481291F19D38311D58A242CD10719D1C27F71B50303BFB33BE530C
5977A843F61978AB4876871FBF42DF8EB5F877033457F33DC0211C667912F605
356708F647A96FA5BD372CB4B05FAB870D7E666372BF9D0A3DA94D8013DBF67F
C885DB4A83FF95526433C01CF43A49AD606DC01548A1C12A73A378CE2BCF7EC7
4C63E7CDA85062D4A62BC22A620D21AF104A1F2584E069121F3565FF66952C08
A5D5DE3818E473E0199E6F6A60EE6F3266132C7C89F1DB8FF2A7D18056EDF003
3B16A38A45CD2BC751170B446F054ED8DE1A00F02C169D9B1F865018ED0C64DC
29009C9303E66B632BBEA752012C0137D00A4A60FB46AAA1A814AD353F45F3BB
A4F5549D5B8D5AAC82F4A3FF8A95DCB245FDBA1D7FDC8C89F0FD74E344E3B55F
201FF364B4F2FB25B14977F6E9A046D5E5393BA6E1D10055B80BAD84AA020F4F
8017BB4FF779B615A46518B256B2C43B27E28B99B89A806FB807693E837663D9
2A3DF30AF50B62E4E4539A48E095AAAFF80BDE1F354A42DDB04462598DF20486
35ED38FF8D9B09F189AD191A0D03369C3FCD5A3AF07A8AB984E69A4F2312EC70
1C2AD5B2B5F9503CCD0FB3DC90EC4ED7759900A66C721E9E6AF7C13304030173
8DFF578642A88CB074C781E4DD3682FE7F6048E2D68C1ED010C18D18CBC93396
E2A3A3F6A835DECC5B8C7560556805A37E0E54E32FA22A6E0FA3E2B925297E53
03F8C0FEFB2D71DFDFE73B3B80F14C43F2F78AB2402E2EF68E7C084AE5867118
7FC428E77D921568A0900825A18A3DC806DB0B5BCD287B90462D73413FB33313
2C659198446A40D7226AB4CF487FC29101F934A525ED224C374D7585270DE1AB
6EE944C5EE7644A17B4AB08668453C3DC03DEE2825054AAB260A238ABAFFD71B
22CD9BAEFB623FA11F8FC91B6740C54DAC21C52A4DC3E9DE73B14EA33F7D3032
180AF505D546608D763570B9A1D071056BCEEA5FE4C0CF761E9291E70357583C
9D958685CA401B75BDF3CDE5B6FAC69BCB3EEB1941F9BDA708EB11EB2E7C3939
2BAD36A60ED493C6B6141CC447BD378028381A1AF59A163F53891B9E23BA8EF5
AF573DE13325F1EAFFB2486EAA7C7C0A3274EED5474CB099CBABBDAB8689EC0A
06766C62C41D5437F8B8294D90DD4D914D839D2156A2933B3A8CD6934FF0C790
6ED26BA96A842A512BD008FC309B8B8037F695934D5F36AA7071207974CA98D3
BAAA326A7B9E850B33B226AF22FDBB0230720CF27336E00D98D135E5DF1DDF7C
A8856A61906BB7222DE42F65F49426F8DB3130314FACAE006BA2064623902C8A
C479EEEBB609E8C3F3189B19204232F30EC774AB6AEB948CBA6F1699D9F4B69D
613D96D86A1BB481B92ECA008DCE33EE4B71C66C9C481C9AC73B31E33AE09BFF
84B081C3F860632FDF4A34ACB769C9FF3D85D6AD5BC9148EFF405D523BD805AF
8BD929B6682E6B079DBF0391D64C276781A7C27B2E75421655929AECF374D106
1121659A75DF1F2261A97DBBA38E4D265AB8A16663EB84102A43E6F66BB04493
942F14422EA71D5261D2DE58ABE2F4CC8BE6694636BECCF3785C7B042EBB95AE
1170DBDA9AC3B33D34E9940754E6F150391D7044D3F3129822028061F5D0E0A6
23A5D77A442524FD095BCE01335F41D8D08923C3FF63827F12F1BA77AE866B5D
C4BCCD45CD2F7BF079E4557A67B09248292D005EBB6905C44D101E9D07A0E85B
1EAA3F365CB313422F9046AA506ADBC7B3D459556C4541DB48E0C6E6F998863E
793E3D0FF2D925FA35D16C5BBF379B2CBEE380B2406C239AE20EF29B4AC1EB42
A19F7B95A131A87960439A1D75ABCC9972F449B6180AEBE3150904BE70354A7D
88D88EA089FB3950BDA3BED9F0935DA4880CE60BB7BE9A76929D199CEBA0494D
F79668F44292B23C6FDFFE6F885AA60DCAE14ED8EF6F3C0FAB062BD22081C3B7
E88E85B22B8CC62DDA1723322F64B1425A6EA19D19D246E63B73AE57CBC1E11B
352E6FE2D125C2462F55CC0C83B99F126D1DE12FCA5ED03DA55FDE95D4AEFB75
F8123321A8084E7AB2C520AA1C45641F93199228B4AEC7B80B09178FBBA11FA7
8673FFF905BAD2201A120FF8848AE3C5AC00A0849D62E0F3CF2D6C29A24A789A
87A91E3BF1FCB2560AD582DB153772FA61136A0A5EF8DA17C886FE35DBEE9CAC
7E77D79BA760EF4C53A3C983853F58CC2BEE8993C4CBE39FBE83BD728E372499
0B905661B4E6D916DA070341B9F4CDA7722F54E24E73ADC58A46C33FBAAF1E6C
F58F4100ABC87634EFEBA19BAB5C24EFCB609B27CCDD74EADDD86CF9DF579B3D
72349C643726555E92BC4D157E7F72707D774E42DE96F512F526494C4B63BA35
FE4B56D74AD399FEECBA08D54C66435E9180146B2612CE834FA05AA139D51156
B0EF86100AA9C79D41803C498E27493FF1368E57D1D3BB77BCA871A2411F73C6
4A17D968CF0EE334272D0C07FAB282082DED26D1508F61EADF9300AE63A15A7D
983219EB991B300213F2BE26FD61F346CAD55B0BEF461C749ACD6B2E995F9304
C86D5002FE74B02B3D0C6B9B201C3AC5CD3117B29101F2177568D605D073E021
874C8DA3233E7DF0A2C22BF3937289BAAD70364C33665F90E24D35581DA77D77
6D1C036FDD81CE07ADE6E6B2935B26BD94ADD389BFC649DD8CEAD520CD0E02D3
BD8695B3C1D4229FD5F78A6F1810C1CF5A20E3EA1943289AF158BA7B1D8AD996
C6E882CB200FB8F085FC7A58576F23CD19CEF83ED66EABA8CF152CF0DF82D0D8
4D0E0B99B789736594D7F6C77E249766696EE6478E9BE3326266B2D53D8C44BF
4406642BE1ADDA9D03A4C2E81BB9548C7003676D13EEE81647141D24B90D58CC
159C2349C7992D40996884C6AD13ACD5A8936380B65C1BDFB873D1B8AA2084BE
9D840DA0D7952036021292592AD968CB3E74C7CE0C692A00E53F59B1F5299A52
BA383D0E1CAD73425414B54116E310D38F7CE7F7C101B79C88C7611B6007BCEE
C990DA88025400B0A6144BCF70456AF84A690F56A09A84EBB1CED5515C36F27E
8C7215D695F3947BC776B062381C25057FEA90D02F15E6A6F8366FE6622ECEB1
54CE3857FB4314F2EFAC60F81D18E8DD894F48AE762283F1DFEA6F94F63BA7AD
4804DD7342209AD8BFDAE064992A2C14B13F18D8048B24FC1C384E097418C103
3DD020930229EB088F1FD538A20C5CC4EEFFBA7C464034283055A466DB744A42
B0FD920C4E64BFEE089AF2C6CC99FAD2726E5180693C7DF6E181C5E53F11D28E
9670AE565FF9CA7C5AD3F494E59E191D6543FAEDC2875F4D6B2C1EA59D629B0F
F93EB424BE41E2F8021F77C2C3E2096C4DBE15B542B3138331B4116377C867D6
30F8DAE7E913B670E14D8737D0FAD3B909E6800512D220EB71B17AB6126C06A3
713F75408E29138A91D4C2B427A4059D2D02A0F91EBEBEAE46A403DDFF8DA377
26289F5DB72C872D87E0D06284B88FCBEB0923BC8EE191BF536B65A044403646
B0E389C30386A643B90182B070C41B01D1487F4031379D351A034D2BF623E519
9BA388D1A597912A3E6A329E152C88A05B2B4943EE919B881181642CB1F6C34F
F817FA8E8118AA5AE3D8EA53665E1468A2277FA7DEB8C7623C43F30BD7931A4D
B33E4A8C486D974A71C92E2A498CB49D0BD07297653D34EB3E88AE69F01D2673
5FA8CEEB03547A081FACA341ACB628F3C6FDD7A80D0507238E2ABF7760B6EB83
C36829DECE216E9E711A8F29EA26BC23A46914E13ABBD241984CF6E0EB68D71A
F6637DB6A215655EF488D040C63ACB5FA24E41CECD6B719B61D7779EEDD1B150
A6EED56EB5E5579BED36C1E75A98CB068B967527DDBDB7956DE8EE507F79A3AC
7B3EB0DE80DB56E28E37B8A1E5EA3A48801CC51BE0E9E50A9E99F717FAA635DA
E480F40B36D3154B85F9782E3F00CAF584B0D4AFB602504C560DC590052EAC34
F2AF0133AE8D7172F3E47139FEF1D23D2F930AF1B361E2ADE457CAE6E96D1559
7F67372229DE04BD898A1A9271B00465CA4D753D7D87BE812C75D98EFAE7428D
3B01E474CD4D5A0B1606AC8BB2B72748D0ED3FBA42C836B1FFF59FB6224E4286
9DDEE75801F5F379101BE0E37118C5C5F37CAE1556EF2F1D0008DABBE17FE3FC
5AF8E86B2E012EA08BEAEE93767FA5DBE95D894BF5FE3B413805A02B2EE402ED
DDDD7AE2A28CF1A20F7B73911F39D6E41D41DD5483609DB028B708C01494CF33
B6576466586175B0232D98BABCAEA0186A9078502B3AE086FD79C3BD069F980F
33D5DAC414DD729391E0541A48D299D16F54C5947BB237807480A3DF960B9898
E521E1447DF673F351F4C3C76CD5239CD2A3EBCF0CEE1840985549BC897E9E6C
03A1B8E46D72E5FB1B072D03FDED02E405FBC16C060F284746EC6752FAA15D35
9ED0AF65D4AA5D6CD65FB1BDCB0EE4A8E150F870A79691650DF78676B501171E
19E15A5A4143B91D8206296D827DA601A555C3B9ED3589218C2D4173F26B2A71
372B67C5F3A6A112882F7F8CE226B094A013419481BD31EB86CE9F023B5AB749
B2108CE10CCBFA1B2C750E35CAD2316001CE6E97746AF645C3D432AD552205B1
C1244304606C0B835EB8ACC8D4CC9C0066A21B3B1ED7A57851758A18DB72B794
83DE686EC712DD17083B9401EBA13942CDFDE03C54CAAE9F4F860A6F5D86A42D
4AC9B54C319AF4B7C820C8BF51E0CF88C9CE9564BE5BB64B73308604A200B5D5
882F227F5E61D2A64798D319912B9C6E968E095453157CC5FC47F50A3947D9B7
65ACA33CB8E9EE2116B4AE565F4DCED31EC23291B846D5D3F501F60CAF098A36
E616D40C8F8F9F127FCFA57D981CFF132C22A2EB0F258239122BD9557079CDD2
6BCA1E1895EB2BB6712434587222B802DAE272A8D71B88F2BA59F3CB801FBC20
F239091AD299B799750A4DE10EC4164A7E31F7C63BC4DA2C1E534471CFCBECF2
A21914B87DA46B30D2EDE937140B4777BC4CE62B57447B836D697387B11DF98F
E71ADC7FFA6D84726E459839B94DCC8AE814637D19597364DF200C5981D9ABF1
05670084BBEA85E2D84780894E85D9857C444E701384B2A4E30CC66954AE4EA2
3FC43D12D362DF60961D9A00D8DB80B64A9868E32D1914FCB5F2537A231E45DF
126CB7E1FA39A8BB639F052301B24DABA9BC0A35CC61EBBC797BA2BF97F250A7
9DEAA066872D65E9D3AC8F826DD7031830C2A5366F878DACB5C3B6CD8C6FE528
C90998F9F80CC07ABBE30D63387B7D2CE64281EEC11FF5AC3FA700F3473AEEC2
8B7BE55B8CBC827D2A3C307E1847052AE0442869BF3E9D5FCF822AD8184DF18F
309E485BEDB26D24F742954A126BEF7E4BDBC8BA390820C16F2978E7BD3CE65D
B109924EE12BE88D1A17A9CB30330D234815C04C7A2A2CB4B8A6C1BFB2B3EF9F
A33465521329CFE4B97FE4DF6058B2FD8203AAA65D8116FE9858A0C8FEB597FB
6E079C882DFA8ECF09C01DDF765F69DD11F6760850FDDDB882440C961ABC6846
D097A39A80B807839904295A07C1BD7CBBF0BF03BE50DD1ACAEA33D3F6A381C2
52D6DF17D58DCB438E3D75525DEBF63E296F910967EB3C70E2835F738D5E6B95
B542C23CB3928078AF5C27FFD95D914DAC9CD8A7A770CA54185DBDB415A4C81B
3A4F0B3575F8072FCF1F95DDE25AE3C2C352428D9A360438E50C12758B370566
7E7D0E890F4A46961F69F379ED3AF59D010528898C81B2C4630DB64B8C0110B5
7B198E3638D98753D504CA921127A8F28ED4E750D99DF2EA1CFECA85E77820ED
B5BE456FEF5725108E34635178553C5DCD3617777621648F106A9B16C3C1C041
F5E8CA674C503145CB04CE3695C0AE00C2B935A64E0697A0E46EEAE6937C28FA
0DA6455E4C5C2CC439AF124EB62D892E63B325A6E1211E63A1786E922217407B
EAE00EE2A55A32169D780BA047E2372B4552D66DCE9DBF7A229A57E037ECB9E3
B0C2DA53597710F4C7D76D07357B169D55F405FEC89DD8663064A08877F462CA
76012871DAA1004DF3B93BE95A1EEF01B585177188C13DCFE957B16F1BA11C07
A25F1E67C44D2DF103862FCCBCD41BE10E91F0A4B8867E7F89465CFFE781E02B
A9089E20163EBEC3AD596BE774506F12F3A7942B3E9FE3950B96E05C0B5DF226
3230A83BFBC0F85556F138A0CD96F6327B577C126A2F6F30C82D2A9379DDB0C9
6BCED519A123191D97A9BAA931A2EFB233BBEFB343865DAC78CADD2FB6FACD11
4FF0F242133A5A244B73EAA408A4A68507BD4437D5079880144048FEC2C6E280
D4EF8AF39FBCAABA8FBE932F21EE27EF8D9304B79CFEE751AA64AE47663971F2
003907CFABAE4366BDE8A9FFAD316C3B88EB2F4C405D837168D3DEAC7136CFA4
4B725943DFA893816D3451933DE8E8202D8A48ECEA85DE1584CD12A95A709887
0CC15624E072233C40775EC61413103A72B9FCC9F6192CB8B29883DFC0EFC941
C71BEA1D64F81B4F158999E085675EE65B5EFBB126A34FC62C1AA7C8BD8D3032
A07CBB3670152959F5600571B6FEE7BF238EFA4F0D6E8A90879D5B6D9D2E1268
FBB0872CD937F53F6034D5A0049E376DCDE9C4A45D9ACDF1862EBD5F57968865
15D4E02D64CABCAF54EF9383FBAFE7193B9F66F80BFCA3D01A4DF9ABA5BE24AA
9AA668A913D21075F803012BF6E9B79FB064E01C6D201393B758CEFC3555421B
9B03CF14C929CA874C4211FF815685737F48364899FE416C0E88F7DF8DF99927
74F2083C7524138D74573AE9293331D7AF3FB95A99A921B667D2AAB74E03780F
DE0FE0BCCA21A563D5B78A4B4711F2C88027FCA11583240AADD5D0DAF9884DE1
E0B61DE9BA21BAE50D9D6ED515E4A347EA0C018649856B2EB279D3E3935D6BF0
2D45E20637927A61117668FE223DC88B707FDEBAC82C77DC940EDDBC77D36867
E8613AD6DF837D3BFA86109EDD39DE19E53E31F886170E2417CD397DF4028A71
B0AEC4E8DB08C8E8C97A9AE73D28FC70B3F10BA5D9AAB3C2537685DB39867969
D6D735F8FB48FCAA612CA3111694728D9CB676052EB451B2CC47BFEDA63E2C52
48376E793637FFBBDD0B4F4F89C12CDBA91790CF186477A0DEC633BC444494BE
7552F236C8E16527CE80CC6745F5EA61D49F1D2884CBC3EBCB356EB098A50A71
B3BDF2D540C103256600AF74BAC392362496960887ADBA48CBF94E0526679D71
EB283B25FBC481148D3538E4D608AB6AD36DEFAB5C5B80184398EC2089A91AA7
B7634EE10574F91B26C7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (tmp12412.dvi)
@start /Fa 205[35 35 35 48[{}3 66.4176 /CMR8 rf /Fb 134[48
14[40 16[57 14[54 74[{}4 99.6264 /CMMI12 rf /Fc 134[50
3[50 1[39 33 1[50 1[50 1[28 2[28 50 50 1[44 50 44 1[44
14[66 8[33 16[50 1[50 50 50 1[50 50 50 1[25 33 45[{
 TeXBase1Encoding ReEncodeFont }25 99.6264 /NimbusRomNo9L-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black -600 -600
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600
-600 a 0 TeXcolorgray
%%HiResBoundingBox: 0 0 374.0pt 350.0pt
 0 TeXcolorgray 0 TeXcolorgray -401
2306 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 350.0 a add def /d
0.0 a add neg def /h 350.0 a add def a neg d moveto a neg h L w h L
w d L closepath clip newpath 0 0 moveto setmatrix end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor   0. true 23.99596 188.35173 169.0 345.90808
.5 Frame  gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 23.99596 175.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(0)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 52.99677 191.35173 52.99677 188.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 52.99677 342.90808 52.99677 345.90808    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 52.99677 175.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-25 w Fc(2)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401
2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 81.99757 191.35173 81.99757 188.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 81.99757 342.90808 81.99757 345.90808    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 81.99757 175.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0 TeXcolorrgb -25 w Fc(4)p 0 TeXcolorgray -401
2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 110.99838 191.35173 110.99838 188.35173    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 110.99838 342.90808 110.99838 345.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 110.99838 175.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(6)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 139.99919 191.35173 139.99919 188.35173    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 139.99919 342.90808 139.99919 345.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 139.99919 175.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-426 2305 a Fc(8)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 169.0 175.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-451 2305 a Fc(10)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 9.49799 188.35173 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-480 2339 a Fc(-0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 26.99596 240.87051 23.99596 240.87051    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 166.0 240.87051 169.0 240.87051    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 9.49799 240.87051 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2339 a Fc(0)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 26.99596 293.3893 23.99596 293.3893    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 166.0 293.3893 169.0 293.3893    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 9.49799 293.3893 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-463 2339 a Fc(0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306
a -401 2306 a
tx@Dict begin { 9.49799 345.90808 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0
TeXcolorrgb -426 2340 a Fc(1)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 89.24777 324.90056 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0 TeXcolorrgb -782 2329 a Fc(Re)o(gular)24 b(c)o(ylindrical)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 169.0 215.038 167.54996 215.62567 166.09991 216.47281 164.64987
217.5737 163.19984 218.91986 161.7498 220.50069 160.29976 222.30281
158.84972 224.31082 157.39967 226.50684 155.94963 228.87112 154.4996
231.3821 153.04956 234.01648 151.59952 236.7495 150.14948 239.55516
148.69943 242.40648 147.24939 245.27571 145.79935 248.13463 144.34932
250.95476 142.89928 253.70767 141.44923 256.36534 139.99919 258.90031
138.54915 261.28583 137.0991 263.49644 135.64908 265.50801 134.19904
267.29817 132.749 268.84622 131.29895 270.13356 129.8489 271.14412
128.39886 271.86404 126.94882 272.2821 125.4988 272.39008 124.04875
272.18242 122.59871 271.6566 121.14867 270.81305 119.69862 269.65532
118.24858 268.19026 116.79854 266.4273 115.34851 264.37918 113.89847
262.06152 112.44843 259.49272 110.99838 256.6939 109.54834 253.68857
108.0983 250.50273 106.64827 247.16437 105.19823 243.70348 103.74818
240.15164 102.29814 236.5419 100.8481 232.90834 99.39806 229.28592
97.94801 225.70992 96.49799 222.21616 95.04794 218.84015 93.5979 215.61685
92.14786 212.58064 90.69781 209.7649 89.24777 207.20146 87.79774 204.92067
86.3477 202.95079 84.89766 201.31789 83.44762 200.04556 81.99757 199.15485
80.54753 198.66368 79.09749 198.587 77.64746 198.93637 76.19742 199.72005
74.74738 200.9428 73.29733 202.60574 71.84729 204.7065 70.39725 207.23874
68.94722 210.19283 67.49718 213.55528 66.04713 217.30933 64.59709 221.43478
63.14705 225.90802 61.697 230.70235 60.24696 235.78839 58.79694 241.13391
57.3469 246.70427 55.89685 252.46266 54.44681 258.3705 52.99677 264.38748
51.54672 270.47209 50.09668 276.58182 48.64665 282.67389 47.19661 288.70483
45.74657 294.63168 44.29652 300.41158 42.84648 306.00284 41.39644 311.36469
39.94641 316.45786 38.49637 321.24504 37.04633 325.69087 35.59628 329.76244
34.14624 333.42972 32.6962 336.6653 31.24615 339.44511 29.79613 341.74838
28.34608 343.55797 26.89604 344.86032 25.446 345.64569    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 1.0 SLW 0.5 0 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 149.99919 335.6562 139.99919 335.6562    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0.5 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 154.99919 335.6562 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0.5 0 0 TeXcolorrgb
26 x Fb(J)-347 2347 y Fa(0)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 169.0 245.43678 167.54996 248.05191 166.09991 250.62221 164.64987
253.122 163.19984 255.52588 161.7498 257.8093 160.29976 259.9487 158.84972
261.92151 157.39967 263.70662 155.94963 265.2845 154.4996 266.63748
153.04956 267.74983 151.59952 268.6082 150.14948 269.20114 148.69943
269.52003 147.24939 269.55858 145.79935 269.31322 144.34932 268.7831
142.89928 267.9701 141.44923 266.87865 139.99919 265.5161 138.54915
263.89253 137.0991 262.02055 135.64908 259.91519 134.19904 257.59396
132.749 255.07663 131.29895 252.38525 129.8489 249.5435 128.39886 246.57693
126.94882 243.51256 125.4988 240.37865 124.04875 237.20448 122.59871
234.0201 121.14867 230.856 119.69862 227.74292 118.24858 224.71143
116.79854 221.7917 115.34851 219.01357 113.89847 216.40547 112.44843
213.99507 110.99838 211.8083 109.54834 209.86952 108.0983 208.20088
106.64827 206.8228 105.19823 205.75299 103.74818 205.0067 102.29814
204.59631 100.8481 204.53162 99.39806 204.8192 97.94801 205.46266 96.49799
206.46242 95.04794 207.81572 93.5979 209.5168 92.14786 211.55652 90.69781
213.9228 89.24777 216.60052 87.79774 219.57141 86.3477 222.81487 84.89766
226.30737 83.44762 230.02296 81.99757 233.93349 80.54753 238.00887
79.09749 242.2172 77.64746 246.5251 76.19742 250.89798 74.74738 255.30037
73.29733 259.69597 71.84729 264.04842 70.39725 268.32135 68.94722 272.47852
67.49718 276.48444 66.04713 280.30444 64.59709 283.90535 63.14705 287.2552
61.697 290.32408 60.24696 293.08406 58.79694 295.50948 57.3469 297.57745
55.89685 299.26752 54.44681 300.56252 52.99677 301.4483 51.54672 301.91383
50.09668 301.95164 48.64665 301.55754 47.19661 300.731 45.74657 299.47485
44.29652 297.79541 42.84648 295.70253 41.39644 293.20958 39.94641 290.33292
38.49637 287.09239 37.04633 283.51051 35.59628 279.61278 34.14624 275.42744
32.6962 270.98488 31.24615 266.31775 29.79613 261.46071 28.34608 256.44958
26.89604 251.32184 25.446 246.11583    /Lineto /lineto load def 0 
setlinejoin false Line  gsave 1.0 SLW 0 0.5 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 149.99919 320.6562 139.99919 320.6562    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0.5 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 154.99919 320.6562 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0.5 0 TeXcolorrgb 26 x Fb(J)-347 2347
y Fa(1)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401
2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 169.0 267.61623 167.54996 267.56612 166.09991 267.25836 164.64987
266.69347 163.19984 265.87428 161.7498 264.80637 160.29976 263.49739
158.84972 261.95732 157.39967 260.19858 155.94963 258.23564 154.4996
256.08488 153.04956 253.76482 151.59952 251.29555 150.14948 248.69865
148.69943 245.99722 147.24939 243.21544 145.79935 240.37848 144.34932
237.51219 142.89928 234.64296 141.44923 231.7974 139.99919 229.0021
138.54915 226.28363 137.0991 223.66766 135.64908 221.17964 134.19904
218.84383 132.749 216.6832 131.29895 214.71951 129.8489 212.97305 128.39886
211.4621 126.94882 210.20311 125.4988 209.2104 124.04875 208.49594
122.59871 208.0696 121.14867 207.93861 119.69862 208.10762 118.24858
208.57881 116.79854 209.35168 115.34851 210.42317 113.89847 211.7875
112.44843 213.43658 110.99838 215.35973 109.54834 217.54356 108.0983
219.97287 106.64827 222.63011 105.19823 225.49564 103.74818 228.54803
102.29814 231.76424 100.8481 235.1199 99.39806 238.58926 97.94801 242.14565
96.49799 245.7616 95.04794 249.40918 93.5979 253.06012 92.14786 256.68633
90.69781 260.2597 89.24777 263.75284 87.79774 267.13893 86.3477 270.39226
84.89766 273.48836 83.44762 276.40388 81.99757 279.11763 80.54753 281.60986
79.09749 283.86281 77.64746 285.86125 76.19742 287.59175 74.74738 289.04378
73.29733 290.20908 71.84729 291.08183 70.39725 291.65912 68.94722 291.9405
67.49718 291.92833 66.04713 291.6275 64.59709 291.04538 63.14705 290.19215
61.697 289.07991 60.24696 287.72346 58.79694 286.1396 57.3469 284.34714
55.89685 282.36655 54.44681 280.22011 52.99677 277.93134 51.54672 275.52513
50.09668 273.02713 48.64665 270.46368 47.19661 267.8618 45.74657 265.24847
44.29652 262.65068 42.84648 260.09521 41.39644 257.60814 39.94641 255.21486
38.49637 252.93964 37.04633 250.80563 35.59628 248.83423 34.14624 247.04535
32.6962 245.45699 31.24615 244.08508 29.79613 242.94339 28.34608 242.04335
26.89604 241.39395 25.446 241.0017    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0.5  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 149.99919 305.65622 139.99919 305.65622    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0.5  setrgbcolor 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 154.99919 305.65622 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0.5 TeXcolorrgb 26 x Fb(J)-347 2347 y Fa(2)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor   0. true 198.99596 188.35173 344.0 345.90808
.5 Frame  gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -401 2306
a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 198.99596 175.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401
2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(0)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 227.99677 191.35173 227.99677 188.35173    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 227.99677 342.90808 227.99677 345.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 227.99677 175.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -25 w Fc(2)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 256.99757 191.35173 256.99757 188.35173    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 256.99757 342.90808 256.99757 345.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 256.99757 175.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -25 w Fc(4)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 285.99838 191.35173 285.99838 188.35173    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 285.99838 342.90808 285.99838 345.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 285.99838 175.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(6)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 314.99919 191.35173 314.99919 188.35173    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 314.99919 342.90808 314.99919 345.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 314.99919 175.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-426 2305 a Fc(8)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 344.0 175.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-451 2305 a Fc(10)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 184.49799 188.35173 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-480 2339 a Fc(-0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 201.99596 240.87051 198.99596 240.87051    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 341.0 240.87051 344.0 240.87051    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 184.49799 240.87051 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2339 a Fc(0)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 201.99596 293.3893 198.99596 293.3893    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 341.0 293.3893 344.0 293.3893    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 184.49799 293.3893 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-463 2339 a Fc(0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306
a -401 2306 a
tx@Dict begin { 184.49799 345.90808 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0
TeXcolorrgb -426 2340 a Fc(1)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 261.3477 324.90056 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0 TeXcolorrgb -799 2329 a Fc(Irre)o(gular)h(c)o(ylindrical)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 344.0 246.71808 342.54996 249.31314 341.09991 251.84978 339.64987
254.30219 338.19984 256.64505 336.7498 258.8541 335.29976 260.90579
333.84972 262.7782 332.39967 264.45082 330.94963 265.90474 329.4996
267.12329 328.04956 268.09163 326.59952 268.79738 325.14948 269.23055
323.69943 269.3838 322.24939 269.25218 320.79935 268.83382 319.34932
268.12933 317.89928 267.1423 316.44923 265.87901 314.99919 264.34862
313.54915 262.56297 312.0991 260.53638 310.64908 258.28595 309.19904
255.8309 307.749 253.19278 306.29895 250.39542 304.8489 247.46413 303.39886
244.42607 301.94882 241.30975 300.4988 238.14482 299.04875 234.96176
297.59871 231.7917 296.14867 228.66609 294.69862 225.61633 293.24858
222.6736 291.79854 219.86836 290.34851 217.23055 288.89847 214.78864
287.44843 212.56972 285.99838 210.59921 284.54834 208.90065 283.0983
207.49524 281.64827 206.4017 280.19823 205.63629 278.74818 205.21225
277.29814 205.14009 275.8481 205.42696 274.39806 206.07672 272.94801
207.09023 271.49799 208.46454 270.04794 210.19377 268.5979 212.26836
267.14786 214.6754 265.69781 217.39882 264.24777 220.41917 262.79774
223.7141 261.3477 227.25806 259.89766 231.02312 258.44762 234.97847
256.99757 239.0911 255.54753 243.32587 254.09749 247.64577 252.64746
252.01227 251.19742 256.3856 249.74738 260.72491 248.29733 264.98871
246.84729 269.13528 245.39725 273.1226 243.94722 276.90921 242.49718
280.45392 241.04713 283.7166 239.59709 286.65807 238.14705 289.24072
236.697 291.42834 235.24696 293.18657 233.79694 294.48326 232.3469
295.28784 230.89685 295.57239 229.44681 295.31085 227.99677 294.47916
226.54672 293.05527 225.09668 291.0188 223.64665 288.35033 222.19661
285.03114 220.74657 281.04202 219.29652 276.36218 217.84648 270.96745
216.39644 264.8279 214.94641 257.90372 213.49637 250.14081 212.04633
241.4617 210.59628 231.753 209.14624 220.84352 207.6962 208.46538 206.24615
194.17932 204.79613 188.35173 203.34608 188.35173 201.89604 188.35173
200.446 188.35173    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 1.0 SLW 0.5 0 0  setrgbcolor  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 324.99919 335.6562 314.99919 335.6562    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0.5 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 329.99919 335.6562 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0.5 0 0 TeXcolorrgb
26 x Fb(Y)-344 2347 y Fa(0)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 344.0 267.02644 342.54996 266.57236 341.09991 265.85822 339.64987
264.8884 338.19984 263.66986 336.7498 262.21205 335.29976 260.52682
333.84972 258.62827 332.39967 256.53297 330.94963 254.25923 329.4996
251.8275 328.04956 249.2598 326.59952 246.5799 325.14948 243.81271
323.69943 240.98438 322.24939 238.12181 320.79935 235.25262 319.34932
232.40474 317.89928 229.60619 316.44923 226.88487 314.99919 224.26828
313.54915 221.78297 312.0991 219.45493 310.64908 217.3087 309.19904
215.36728 307.749 213.65224 306.29895 212.18318 304.8489 210.97745
303.39886 210.05008 301.94882 209.41397 300.4988 209.0791 299.04875
209.05275 297.59871 209.3396 296.14867 209.94125 294.69862 210.85634
293.24858 212.08066 291.79854 213.60696 290.34851 215.42516 288.89847
217.52234 287.44843 219.88275 285.99838 222.48788 284.54834 225.31686
283.0983 228.34647 281.64827 231.55124 280.19823 234.9038 278.74818
238.37502 277.29814 241.93427 275.8481 245.54968 274.39806 249.18846
272.94801 252.81706 271.49799 256.40169 270.04794 259.90825 268.5979
263.30286 267.14786 266.5523 265.69781 269.62402 264.24777 272.4865
262.79774 275.10971 261.3477 277.46497 259.89766 279.5257 258.44762
281.26733 256.99757 282.6677 255.54753 283.70692 254.09749 284.36815
252.64746 284.63693 251.19742 284.50227 249.74738 283.95566 248.29733
282.99216 246.84729 281.60965 245.39725 279.8091 243.94722 277.5947
242.49718 274.97348 241.04713 271.95532 239.59709 268.55264 238.14705
264.78043 236.697 260.6558 235.24696 256.19739 233.79694 251.42563
232.3469 246.36159 230.89685 241.02678 229.44681 235.44232 227.99677
229.62813 226.54672 223.6017 225.09668 217.37729 223.64665 210.9636
222.19661 204.36177 220.74657 197.56258 219.29652 190.54208 217.84648
188.35173 216.39644 188.35173 214.94641 188.35173 213.49637 188.35173
212.04633 188.35173 210.59628 188.35173 209.14624 188.35173 207.6962
188.35173 206.24615 188.35173 204.79613 188.35173 203.34608 188.35173
201.89604 188.35173 200.446 188.35173    /Lineto /lineto load def 0
 setlinejoin false Line  gsave 1.0 SLW 0 0.5 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 324.99919 320.6562 314.99919 320.6562    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0.5 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 329.99919 320.6562 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0.5 0 TeXcolorrgb 26 x Fb(Y)-344 2347
y Fa(1)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401
2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 344.0 240.25415 342.54996 237.62018 341.09991 234.99078 339.64987
232.39099 338.19984 229.84576 336.7498 227.37991 335.29976 225.0174
333.84972 222.78168 332.39967 220.69511 330.94963 218.77881 329.4996
217.05261 328.04956 215.5346 326.59952 214.24129 325.14948 213.18681
323.69943 212.3837 322.24939 211.84212 320.79935 211.56966 319.34932
211.57175 317.89928 211.85136 316.44923 212.40869 314.99919 213.24174
313.54915 214.3458 312.0991 215.71349 310.64908 217.33516 309.19904
219.19875 307.749 221.29004 306.29895 223.59225 304.8489 226.087 303.39886
228.7537 301.94882 231.57028 300.4988 234.51294 299.04875 237.55673
297.59871 240.67552 296.14867 243.84232 294.69862 247.02951 293.24858
250.20906 291.79854 253.35275 290.34851 256.43256 288.89847 259.42078
287.44843 262.29008 285.99838 265.01424 284.54834 267.5679 283.0983
269.92715 281.64827 272.0694 280.19823 273.97372 278.74818 275.62125
277.29814 276.99492 275.8481 278.07986 274.39806 278.86354 272.94801
279.3358 271.49799 279.48894 270.04794 279.31772 268.5979 278.81943
267.14786 277.99405 265.69781 276.84378 264.24777 275.37346 262.79774
273.59024 261.3477 271.50366 259.89766 269.12509 258.44762 266.46828
256.99757 263.54854 255.54753 260.3826 254.09749 256.98874 252.64746
253.38626 251.19742 249.59526 249.74738 245.63622 248.29733 241.52972
246.84729 237.29613 245.39725 232.95502 243.94722 228.52492 242.49718
224.02249 241.04713 219.46228 239.59709 214.85596 238.14705 210.21141
236.697 205.53209 235.24696 200.8159 233.79694 196.05371 232.3469 191.22797
230.89685 188.35173 229.44681 188.35173 227.99677 188.35173 226.54672
188.35173 225.09668 188.35173 223.64665 188.35173 222.19661 188.35173
220.74657 188.35173 219.29652 188.35173 217.84648 188.35173 216.39644
188.35173 214.94641 188.35173 213.49637 188.35173 212.04633 188.35173
210.59628 188.35173 209.14624 188.35173 207.6962 188.35173 206.24615
188.35173 204.79613 188.35173 203.34608 188.35173 201.89604 188.35173
200.446 188.35173    /Lineto /lineto load def 0  setlinejoin false
Line  gsave 1.0 SLW 0 0 0.5  setrgbcolor  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 324.99919 305.65622 314.99919 305.65622    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0.5  setrgbcolor 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 329.99919 305.65622 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0.5 TeXcolorrgb 26 x Fb(Y)-344 2347 y Fa(2)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor   0. true 23.99596 13.35173 169.0 170.90808
.5 Frame  gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -401 2306
a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 23.99596 0.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401
2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(0)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 52.99677 16.35173 52.99677 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 52.99677 167.90808 52.99677 170.90808    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 52.99677 0.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -25 w Fc(2)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 81.99757 16.35173 81.99757 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 81.99757 167.90808 81.99757 170.90808    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 81.99757 0.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -25 w Fc(4)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 110.99838 16.35173 110.99838 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 110.99838 167.90808 110.99838 170.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 110.99838 0.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(6)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 139.99919 16.35173 139.99919 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 139.99919 167.90808 139.99919 170.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 139.99919 0.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-426 2305 a Fc(8)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 169.0 0.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-451 2305 a Fc(10)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 9.49799 13.35173 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-480 2339 a Fc(-0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 26.99596 65.87051 23.99596 65.87051    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 166.0 65.87051 169.0 65.87051    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 9.49799 65.87051 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2339 a Fc(0)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 26.99596 118.3893 23.99596 118.3893    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 166.0 118.3893 169.0 118.3893    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 9.49799 118.3893 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-463 2339 a Fc(0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306
a -401 2306 a
tx@Dict begin { 9.49799 170.90808 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0
TeXcolorrgb -426 2340 a Fc(1)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 89.24777 149.90056 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0 TeXcolorrgb -750 2329 a Fc(Re)o(gular)g(spherical)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 169.0 60.15625 167.54996 61.01613 166.09991 61.94255 164.64987 62.92772
163.19984 63.96313 161.7498 65.0396 160.29976 66.14735 158.84972 67.27614
157.39967 68.41528 155.94963 69.55374 154.4996 70.68028 153.04956 71.78355
151.59952 72.85214 150.14948 73.87473 148.69943 74.8402 147.24939 75.7377
145.79935 76.55682 144.34932 77.28757 142.89928 77.92073 141.44923
78.4476 139.99919 78.8605 138.54915 79.1523 137.0991 79.31721 135.64908
79.3504 134.19904 79.24788 132.749 79.00725 131.29895 78.62701 129.8489
78.10718 128.39886 77.449 126.94882 76.65492 125.4988 75.72884 124.04875
74.676 122.59871 73.50293 121.14867 72.21745 119.69862 70.82861 118.24858
69.34677 116.79854 67.78333 115.34851 66.15085 113.89847 64.46284 112.44843
62.73381 110.99838 60.979 109.54834 59.2144 108.0983 57.4566 106.64827
55.72267 105.19823 54.03004 103.74818 52.39629 102.29814 50.83911 100.8481
49.37625 99.39806 48.02516 97.94801 46.80283 96.49799 45.72588 95.04794
44.81038 93.5979 44.07164 92.14786 43.52377 90.69781 43.1803 89.24777
43.05331 87.79774 43.15372 86.3477 43.491 84.89766 44.07333 83.44762
44.90712 81.99757 45.9973 80.54753 47.34714 79.09749 48.95789 77.64746
50.82924 76.19742 52.95909 74.74738 55.34323 73.29733 57.97598 71.84729
60.84953 70.39725 63.95442 68.94722 67.27939 67.49718 70.81148 66.04713
74.53609 64.59709 78.4371 63.14705 82.4968 61.697 86.6963 60.24696
91.01535 58.79694 95.4326 57.3469 99.9258 55.89685 104.4716 54.44681
109.04642 52.99677 113.62573 51.54672 118.18478 50.09668 122.69856
48.64665 127.14229 47.19661 131.49104 45.74657 135.72017 44.29652 139.80571
42.84648 143.72424 41.39644 147.45308 39.94641 150.9708 38.49637 154.25658
37.04633 157.29132 35.59628 160.05717 34.14624 162.53773 32.6962 164.71832
31.24615 166.58589 29.79613 168.12941 28.34608 169.33955 26.89604 170.20926
25.446 170.73308    /Lineto /lineto load def 0  setlinejoin false Line
 gsave 1.0 SLW 0.5 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 149.99919 160.556 139.99919 160.556    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0.5 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 154.99919 160.556 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0.5 0 0 TeXcolorrgb
23 x Fb(j)-361 2344 y Fa(0)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 169.0 74.11249 167.54996 74.81436 166.09991 75.44212 164.64987 75.98822
163.19984 76.4457 161.7498 76.8084 160.29976 77.07077 158.84972 77.22823
157.39967 77.27707 155.94963 77.21446 154.4996 77.03864 153.04956 76.74873
151.59952 76.34515 150.14948 75.82915 148.69943 75.20316 147.24939
74.47064 145.79935 73.63612 144.34932 72.70518 142.89928 71.68445 141.44923
70.58142 139.99919 69.40463 138.54915 68.16339 137.0991 66.86787 135.64908
65.52893 134.19904 64.1581 132.749 62.76744 131.29895 61.3695 129.8489
59.97719 128.39886 58.60367 126.94882 57.26224 125.4988 55.96626 124.04875
54.72906 122.59871 53.56357 121.14867 52.48285 119.69862 51.49896 118.24858
50.624 116.79854 49.8691 115.34851 49.24475 113.89847 48.76053 112.44843
48.42514 110.99838 48.24626 109.54834 48.2305 108.0983 48.38312 106.64827
48.70842 105.19823 49.20903 103.74818 49.88663 102.29814 50.74121 100.8481
51.77153 99.39806 52.97495 97.94801 54.34705 96.49799 55.88255 95.04794
57.57442 93.5979 59.41435 92.14786 61.39276 90.69781 63.49878 89.24777
65.72035 87.79774 68.04431 86.3477 70.45644 84.89766 72.9416 83.44762
75.48387 81.99757 78.06653 80.54753 80.6722 79.09749 83.28333 77.64746
85.88164 76.19742 88.44876 74.74738 90.9665 73.29733 93.41629 71.84729
95.78006 70.39725 98.04005 68.94722 100.17873 67.49718 102.17958 66.04713
104.02657 64.59709 105.70454 63.14705 107.19933 61.697 108.49791 60.24696
109.58852 58.79694 110.46053 57.3469 111.10493 55.89685 111.51405 54.44681
111.68181 52.99677 111.60365 51.54672 111.27667 50.09668 110.69992
48.64665 109.87358 47.19661 108.8002 45.74657 107.48355 44.29652 105.92921
42.84648 104.14452 41.39644 102.13841 39.94641 99.92107 38.49637 97.50456
37.04633 94.90216 35.59628 92.12843 34.14624 89.19914 32.6962 86.13142
31.24615 82.94301 29.79613 79.6527 28.34608 76.28004 26.89604 72.84505
25.446 69.36826    /Lineto /lineto load def 0  setlinejoin false Line
 gsave 1.0 SLW 0 0.5 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 149.99919 145.3556 139.99919 145.3556    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0.5 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 154.99919 145.3556 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0.5 0 TeXcolorrgb 23 x Fb(j)-361 2344
y Fa(1)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401
2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 169.0 74.05737 167.54996 73.43517 166.09991 72.72856 164.64987 71.94249
163.19984 71.08264 161.7498 70.15549 160.29976 69.16821 158.84972 68.12865
157.39967 67.04526 155.94963 65.92705 154.4996 64.78343 153.04956 63.6243
151.59952 62.4598 150.14948 61.30032 148.69943 60.1564 147.24939 59.03867
145.79935 57.95763 144.34932 56.92378 142.89928 55.94731 141.44923
55.0382 139.99919 54.20589 138.54915 53.45938 137.0991 52.8074 135.64908
52.25754 134.19904 51.81721 132.749 51.49255 131.29895 51.2893 129.8489
51.21188 128.39886 51.26419 126.94882 51.44885 125.4988 51.76753 124.04875
52.22089 122.59871 52.80856 121.14867 53.52913 119.69862 54.37993 118.24858
55.3574 116.79854 56.45705 115.34851 57.67316 113.89847 58.99915 112.44843
60.42752 110.99838 61.9499 109.54834 63.55713 108.0983 65.23923 106.64827
66.98566 105.19823 68.78523 103.74818 70.62628 102.29814 72.49672 100.8481
74.3842 99.39806 76.2761 97.94801 78.1597 96.49799 80.02232 95.04794
81.85135 93.5979 83.63435 92.14786 85.35907 90.69781 87.01395 89.24777
88.58762 87.79774 90.06949 86.3477 91.44946 84.89766 92.71854 83.44762
93.86806 81.99757 94.89072 80.54753 95.77985 79.09749 96.53014 77.64746
97.13704 76.19742 97.59721 74.74738 97.90865 73.29733 98.0701 71.84729
98.08195 70.39725 97.94551 68.94722 97.66318 67.49718 97.23862 66.04713
96.67677 64.59709 95.9833 63.14705 95.16518 61.697 94.23024 60.24696
93.18732 58.79694 92.04597 57.3469 90.81673 55.89685 89.51057 54.44681
88.13931 52.99677 86.71501 51.54672 85.25026 50.09668 83.758 48.64665
82.25133 47.19661 80.7432 45.74657 79.24693 44.29652 77.77547 42.84648
76.34155 41.39644 74.95753 39.94641 73.63539 38.49637 72.38652 37.04633
71.22166 35.59628 70.15085 34.14624 69.18327 32.6962 68.32724 31.24615
67.59009 29.79613 66.97816 28.34608 66.49669 26.89604 66.14981 25.446
65.94049    /Lineto /lineto load def 0  setlinejoin false Line  gsave
1.0 SLW 0 0 0.5  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 149.99919 130.15523 139.99919 130.15523    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0.5  setrgbcolor 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 154.99919 130.15523 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0.5 TeXcolorrgb 23 x Fb(j)-361 2344 y Fa(2)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor   0. true 198.99596 13.35173 344.0 170.90808
.5 Frame  gsave 1 1 1  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -401 2306
a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 198.99596 0.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401
2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(0)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 227.99677 16.35173 227.99677 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 227.99677 167.90808 227.99677 170.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 227.99677 0.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -25 w Fc(2)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 256.99757 16.35173 256.99757 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 256.99757 167.90808 256.99757 170.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 256.99757 0.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -25 w Fc(4)p 0 TeXcolorgray
-401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 285.99838 16.35173 285.99838 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 285.99838 167.90808 285.99838 170.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 285.99838 0.0 } PutCoor PutBegin  end
 -401 2306 a -401
2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2305 a Fc(6)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 314.99919 16.35173 314.99919 13.35173    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 314.99919 167.90808 314.99919 170.90808    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 314.99919 0.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-426 2305 a Fc(8)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 344.0 0.0 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-451 2305 a Fc(10)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306
a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 184.49799 13.35173 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-480 2339 a Fc(-0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 201.99596 65.87051 198.99596 65.87051    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 341.0 65.87051 344.0 65.87051    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 184.49799 65.87051 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb -426 2339 a Fc(0)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 201.99596 118.3893 198.99596 118.3893    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 341.0 118.3893 344.0 118.3893    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0 0 0  setrgbcolor  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 184.49799 118.3893 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0 TeXcolorrgb
-463 2339 a Fc(0.5)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401
2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306
a -401 2306 a
tx@Dict begin { 184.49799 170.90808 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0 0
TeXcolorrgb -426 2340 a Fc(1)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 261.3477 149.90056 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0 TeXcolorrgb -767 2329 a Fc(Irre)o(gular)g(spherical)p
0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 344.0 74.68391 342.54996 75.3047 341.09991 75.84294 339.64987 76.2916
338.19984 76.64442 336.7498 76.89578 335.29976 77.04126 333.84972 77.07707
332.39967 77.0004 330.94963 76.80965 329.4996 76.5042 328.04956 76.08435
326.59952 75.55179 325.14948 74.90913 323.69943 74.16017 322.24939
73.30978 320.79935 72.36394 319.34932 71.32964 317.89928 70.21489 316.44923
69.0287 314.99919 67.78088 313.54915 66.48215 312.0991 65.14394 310.64908
63.7783 309.19904 62.39792 307.749 61.01588 306.29895 59.64565 304.8489
58.30093 303.39886 56.99554 301.94882 55.74332 300.4988 54.55797 299.04875
53.45287 297.59871 52.44115 296.14867 51.5355 294.69862 50.74773 293.24858
50.08925 291.79854 49.57025 290.34851 49.20021 288.89847 48.9875 287.44843
48.9393 285.99838 49.06155 284.54834 49.35861 283.0983 49.8338 281.64827
50.48871 280.19823 51.32344 278.74818 52.33653 277.29814 53.52481 275.8481
54.88368 274.39806 56.4067 272.94801 58.08583 271.49799 59.91148 270.04794
61.87239 268.5979 63.95578 267.14786 66.14738 265.69781 68.43143 264.24777
70.79083 262.79774 73.20721 261.3477 75.66096 259.89766 78.13144 258.44762
80.59688 256.99757 83.0348 255.54753 85.42178 254.09749 87.73398 252.64746
89.94681 251.19742 92.03537 249.74738 93.97426 248.29733 95.73816 246.84729
97.30153 245.39725 98.63876 243.94722 99.72433 242.49718 100.5326 241.04713
101.03845 239.59709 101.21649 238.14705 101.0415 236.697 100.48805
235.24696 99.53053 233.79694 98.14299 232.3469 96.29832 230.89685 93.96817
229.44681 91.12186 227.99677 87.726 226.54672 83.74286 225.09668 79.12866
223.64665 73.8314 222.19661 67.78741 220.74657 60.91714 219.29652 53.11842
217.84648 44.25714 216.39644 34.15285 214.94641 22.55722 213.49637
13.35173 212.04633 13.35173 210.59628 13.35173 209.14624 13.35173 207.6962
13.35173 206.24615 13.35173 204.79613 13.35173 203.34608 13.35173 201.89604
13.35173 200.446 13.35173    /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.0 SLW 0.5 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0.5 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 324.99919 161.9062 314.99919 161.9062    /Lineto /lineto load def
0  setlinejoin false Line  gsave 1.0 SLW 0.5 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401
2306 a
tx@Dict begin { 329.99919 161.9062 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0.5 0 0 TeXcolorrgb
12 x Fb(y)-353 2333 y Fa(0)p 0 TeXcolorgray -401 2306
a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 344.0 72.46611 342.54996 71.67786 341.09991 70.81607 339.64987 69.88763
338.19984 68.90018 336.7498 67.86198 335.29976 66.78204 333.84972 65.66988
332.39967 64.53552 330.94963 63.3894 329.4996 62.24226 328.04956 61.1051
326.59952 59.98904 325.14948 58.90521 323.69943 57.86473 322.24939
56.87852 320.79935 55.95723 319.34932 55.1111 317.89928 54.3501 316.44923
53.68332 314.99919 53.11937 313.54915 52.66614 312.0991 52.33064 310.64908
52.11899 309.19904 52.03622 307.749 52.08653 306.29895 52.27277 304.8489
52.59691 303.39886 53.0594 301.94882 53.65979 300.4988 54.3961 299.04875
55.2654 297.59871 56.26318 296.14867 57.38402 294.69862 58.62108 293.24858
59.96635 291.79854 61.41078 290.34851 62.9441 288.89847 64.55511 287.44843
66.23161 285.99838 67.96054 284.54834 69.72801 283.0983 71.51947 281.64827
73.3198 280.19823 75.1133 278.74818 76.88402 277.29814 78.61566 275.8481
80.29175 274.39806 81.89589 272.94801 83.41179 271.49799 84.82327 270.04794
86.11461 268.5979 87.27055 267.14786 88.27608 265.69781 89.11743 264.24777
89.78116 262.79774 90.25478 261.3477 90.52682 259.89766 90.587 258.44762
90.42567 256.99757 90.03471 255.54753 89.40712 254.09749 88.53667 252.64746
87.41887 251.19742 86.05002 249.74738 84.4274 248.29733 82.54964 246.84729
80.41602 245.39725 78.02672 243.94722 75.3822 242.49718 72.4836 241.04713
69.33182 239.59709 65.92752 238.14705 62.27051 236.697 58.35916 235.24696
54.1897 233.79694 49.75534 232.3469 45.04471 230.89685 40.04105 229.44681
34.719 227.99677 29.04308 226.54672 22.96277 225.09668 16.40811 223.64665
13.35173 222.19661 13.35173 220.74657 13.35173 219.29652 13.35173 217.84648
13.35173 216.39644 13.35173 214.94641 13.35173 213.49637 13.35173 212.04633
13.35173 210.59628 13.35173 209.14624 13.35173 207.6962 13.35173 206.24615
13.35173 204.79613 13.35173 203.34608 13.35173 201.89604 13.35173 200.446
13.35173    /Lineto /lineto load def 0  setlinejoin false Line  gsave
1.0 SLW 0 0.5 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0.5 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 324.99919 149.40622 314.99919 149.40622    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0.5 0  setrgbcolor 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -401
2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401 2306 a -401 2306 a
tx@Dict begin { 329.99919 149.40622 } PutCoor PutBegin  end
 -401 2306 a -401 2306
a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306 a 0 0.5 0 TeXcolorrgb 12 x Fb(y)-353 2333
y Fa(1)p 0 TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401
2306 a
tx@Dict begin  PutEnd  end
 -401 2306 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 344.0 59.0358 342.54996 58.19612 341.09991 57.41203 339.64987 56.69185
338.19984 56.04341 336.7498 55.47408 335.29976 54.99062 333.84972 54.59924
332.39967 54.30525 330.94963 54.11345 329.4996 54.02742 328.04956 54.05032
326.59952 54.18414 325.14948 54.43002 323.69943 54.7881 322.24939 55.25761
320.79935 55.83662 319.34932 56.52245 317.89928 57.31133 316.44923
58.19853 314.99919 59.17845 313.54915 60.24454 312.0991 61.38943 310.64908
62.60497 309.19904 63.8822 307.749 65.21155 306.29895 66.5828 304.8489
67.98518 303.39886 69.40752 301.94882 70.83824 300.4988 72.26549 299.04875
73.67723 297.59871 75.06131 296.14867 76.40556 294.69862 77.69806 293.24858
78.92679 291.79854 80.0803 290.34851 81.14728 288.89847 82.11699 287.44843
82.97923 285.99838 83.72449 284.54834 84.34378 283.0983 84.82906 281.64827
85.17294 280.19823 85.36905 278.74818 85.41191 277.29814 85.29678 275.8481
85.02032 274.39806 84.5798 272.94801 83.97363 271.49799 83.20119 270.04794
82.26299 268.5979 81.1602 267.14786 79.89513 265.69781 78.47061 264.24777
76.89064 262.79774 75.15942 261.3477 73.28217 259.89766 71.2642 258.44762
69.11134 256.99757 66.8294 255.54753 64.42424 254.09749 61.90137 252.64746
59.26585 251.19742 56.52193 249.74738 53.67271 248.29733 50.71968 246.84729
47.66267 245.39725 44.49863 243.94722 41.22156 242.49718 37.82149 241.04713
34.28319 239.59709 30.58566 238.14705 26.69958 236.697 22.5861 235.24696
18.19344 233.79694 13.45404 232.3469 13.35173 230.89685 13.35173 229.44681
13.35173 227.99677 13.35173 226.54672 13.35173 225.09668 13.35173 223.64665
13.35173 222.19661 13.35173 220.74657 13.35173 219.29652 13.35173 217.84648
13.35173 216.39644 13.35173 214.94641 13.35173 213.49637 13.35173 212.04633
13.35173 210.59628 13.35173 209.14624 13.35173 207.6962 13.35173 206.24615
13.35173 204.79613 13.35173 203.34608 13.35173 201.89604 13.35173 200.446
13.35173    /Lineto /lineto load def 0  setlinejoin false Line  gsave
1.0 SLW 0 0 0.5  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0 SLW 0 0 0.5  setrgbcolor  /ArrowA { moveto } def /ArrowB { } def
 [ 324.99919 136.90625 314.99919 136.90625    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 1.0 SLW 0 0 0.5  setrgbcolor 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -401 2306 a
tx@Dict begin  gsave STV CP T /ps@rot 0.0 def grestore  end
 -401
2306 a -401 2306 a
tx@Dict begin { 329.99919 136.90625 } PutCoor PutBegin  end
 -401 2306 a -401 2306 a
tx@Dict begin ps@rot  RotBegin  end
 -401 2306
a 0 0 0.5 TeXcolorrgb 12 x Fb(y)-353 2333 y Fa(2)p 0
TeXcolorgray -401 2306 a
tx@Dict begin RotEnd  end
 -401 2306 a -401 2306 a
tx@Dict begin  PutEnd  end
 -401
2306 a 2505 2306 a
currentpoint initclip moveto
 2505 2306 a 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
